*textobj-multiblock.txt*	複数の括弧に対応している textobj

==============================================================================
目次						*textobj-multiblock-contents*

概要				|textobj-multiblock-introduction|
範囲例				|textobj-multiblock-example|
設定例				|textobj-multiblock-customizing|
インターフェース		|textobj-multiblock-interface|
  マッピング			  |textobj-multiblock-mapping|
  関数				  |textobj-multiblock-functions|
設定				|textobj-multiblock-setting|
  textobj-multiblock の変数	  |textobj-multiblock-variables|



==============================================================================
概要						*textobj-multiblock-introduction*

|textobj-multiblock| は設定されている複数の括弧で使用出来る textobj です。
|g:textobj_multiblock_blocks| に設定されている括弧全てに反応します。
この textobj を使用すると i( や i[ のように括弧ごとにキーマッピングを使い分け
ることなく |<Plug>(textobj-multiblock-i)| という1つのマッピングで完結する事が
出来ます。


このプラグインを使用する場合は kana 氏が作成された |textobj-user| が必要になり
ます。

- kana/vim-textobj-user - https://github.com/kana/vim-textobj-user


==============================================================================
範囲例						*textobj-multiblock-example*

	|<Plug>(textobj-multiblock-i)| が反応する範囲です。

	| : カーソル位置
	* : 有効な範囲
>
	" g:textobj_multiblock_blocks に設定されてある括弧に反応する
	(***|***)
	[***|***]
	{***|***}


	" " や ' も指定できる
	"***|***"
	'***|***'


	" ネストしている場合
	(   (***|***)   )
	(*|*(*******)***)
	{*|*(***(*******)***)**}


	" 次のような場合は g:textobj_multiblock_blocks に
	" 先に設定されている括弧が優先される

	let g:textobj_multiblock_blocks = [["(", ")"], ["{", "}"]]
	(*|*{*******)   }
	(***{***|***)   }
	(   {*******)*|*}

	let g:textobj_multiblock_blocks = [["{", "}"], ["(", ")"]]
	(   {***|***)***}


	" + に反応して欲しい場合は次のような設定
	let g:textobj_multiblock_blocks = [["+", "+"]]
	+***|***+
<



==============================================================================
設定例						*textobj-multiblock-customizing*

>
	omap ab <Plug>(textobj-multiblock-a)
	omap ib <Plug>(textobj-multiblock-i)
	xmap ab <Plug>(textobj-multiblock-a)
	xmap ib <Plug>(textobj-multiblock-i)
<


==============================================================================
インターフェース				*textobj-multiblock-interface*

------------------------------------------------------------------------------
マッピング					*textobj-multiblock-mapping*

<Plug>(textobj-multiblock-i)			*<Plug>(textobj-multiblock-i)*

括弧を含まない範囲

<Plug>(textobj-multiblock-a)			*<Plug>(textobj-multiblock-a)*

括弧を含む範囲

------------------------------------------------------------------------------
関数						*textobj-multiblock-functions*

textobj#multiblock#mapexpr_i({blocks})		*textobj#multiblock#mapexpr_i()*
	{blocks} の設定を使用する |:map-<expr>| を返します。
	この関数は括弧を含まない |:map-<expr>| を返します。
	{blocks} には |g:textobj_multiblock_blocks| と同等の設定を渡すことがで
	きます。
	この関数は |sha256()| が使用できる場合のみ使用することができます。
Example: >
	" {} と [] にマッチする map-<expr> を返す
	omap <expr> ib textobj#multiblock#mapexpr_i([
	\	["{", "}"],
	\	["[", "]"],
	\])
	vmap <expr> ib textobj#multiblock#mapexpr_i([
	\	["{", "}"],
	\	["[", "]"],
	\])
<

textobj#multiblock#mapexpr_a({blocks})
	|textobj#multiblock#mapexpr_i()| と同等ですが、括弧を含みます。


==============================================================================
設定						*textobj-multiblock-setting*

------------------------------------------------------------------------------
textobj-multiblock の変数			*textobj-multiblock-variables*

g:textobj_multiblock_blocks			*g:textobj_multiblock_blocks*
	textobj-multiblock が反応する括弧を設定します。
	先に設定されている括弧ほど優先順位が高いです。

Example: >
	let g:textobj_multiblock_blocks = [
	\	[ "(", ")" ],
	\	[ "[", "]" ],
	\	[ "{", "}" ],
	\	[ '<', '>' ],
	\	[ '"', '"', 1 ],
	\	[ "'", "'", 1 ],
	]
<

	また、各リストの第3要素に 1 を設定すると同一の行でのみマッチします。

Example: >
    " 同一行に " があった場合のみマッチする
    let g:textobj_multiblock_blocks = [
    \	[ '"', '"', 1 ],
    \]
<
	また、2文字以上の正規表現も設定する事ができます。|pattern|を参照して下
	さい。
	|/^| や |/$| を使用する場合、代わりに |/\_^| や |/\_$| を使用する必要
	があります。
Example: >
	" function ～ endfunction
	" if ～ endif
	let g:textobj_multiblock_blocks = [
	\	['\_^\s*\<function\>.*', '\_^\s*endfunction\_$'],
	\	['\_^\s*\<if\>.*', '\_^\s*\<endif\>\s*\_$'],
	\]
<


b:textobj_multiblock_blocks			*b:textobj_multiblock_blocks*
	|g:textobj_multiblock_blocks| と同等の設定です。
	|g:textobj_multiblock_blocks| よりも優先して使用されます。


g:textobj_multiblock_search_limit	*g:textobj_multiblock_search_limit*
	検索する範囲を設定します。
	この変数が定義されている場合、カーソル行からその値の行数のみをチェック
	します。
	0 が設定されている場合は全範囲をチェックします。
	バッファの行数が多くて遅いと感じる場合はこの値を設定して調整して下さ
	い。
Example: >
	" カーソル行から前後200行の範囲のみチェックする
	let g:textobj_multiblock_search_limit = 200
<

				*g:textobj#multiblock#enable_block_in_cursor*
g:textobj#multiblock#enable_block_in_cursor
	1 が設定されていればカーソル上にブロックが存在する場合にそのブロックを
	含んだ範囲が考慮されるようになります。
Default: >
	let g:textobj#multiblock#enable_block_in_cursor = 1
<

g:textobj#multiblock#default_blocks	*g:textobj#multiblock#default_blocks*
	デフォルトで使用されるブロックが設定されています。
	基本的にユーザはこの変数の値は変更しませんが、デフォルト値を無効にした
	い場合はこの変数に [] を設定して下さい。
Default: >
	let g:textobj#multiblock#default_blocks = [
	\	[ "(", ")" ],
	\	[ "[", "]" ],
	\	[ "{", "}" ],
	\	[ '<', '>' ],
	\	[ '"', '"', 1 ],
	\	[ "'", "'", 1 ],
	\]
<
Example: >
	" デフォルト値を無効にする
	let g:textobj#multiblock#default_blocks = []
<


==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
